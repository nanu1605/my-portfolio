{"ast":null,"code":"import { hierarchy, tree } from 'd3-hierarchy';\nfunction getTreeData(props) {\n  const margins = props.margins || {\n    bottom: 10,\n    left: props.direction !== 'rtl' ? 20 : 150,\n    right: props.direction !== 'rtl' ? 150 : 20,\n    top: 10\n  };\n  const contentWidth = props.width - margins.left - margins.right;\n  const contentHeight = props.height - margins.top - margins.bottom;\n  const data = hierarchy(props.data, props.getChildren);\n  const root = tree().size([contentHeight, contentWidth])(data);\n\n  // d3 gives us a top to down tree, but we will display it left to right/right to left, so x and y need to be swapped\n  const links = root.links().map(link => ({\n    ...link,\n    source: {\n      ...link.source,\n      x: props.direction !== 'rtl' ? link.source.y : contentWidth - link.source.y,\n      y: link.source.x\n    },\n    target: {\n      ...link.target,\n      x: props.direction !== 'rtl' ? link.target.y : contentWidth - link.target.y,\n      y: link.target.x\n    }\n  }));\n  const nodes = root.descendants().map(node => ({\n    ...node,\n    x: props.direction !== 'rtl' ? node.y : contentWidth - node.y,\n    y: node.x\n  }));\n  return {\n    links,\n    margins,\n    nodes\n  };\n}\nexport { getTreeData as default };","map":{"version":3,"names":["hierarchy","tree","getTreeData","props","margins","bottom","left","direction","right","top","contentWidth","width","contentHeight","height","data","getChildren","root","size","links","map","link","source","x","y","target","nodes","descendants","node","default"],"sources":["C:/Users/tanis/my-portfolio/node_modules/react-tree-graph/dist/module/d3.js"],"sourcesContent":["import { hierarchy, tree } from 'd3-hierarchy';\n\nfunction getTreeData(props) {\n  const margins = props.margins || {\n    bottom: 10,\n    left: props.direction !== 'rtl' ? 20 : 150,\n    right: props.direction !== 'rtl' ? 150 : 20,\n    top: 10\n  };\n  const contentWidth = props.width - margins.left - margins.right;\n  const contentHeight = props.height - margins.top - margins.bottom;\n  const data = hierarchy(props.data, props.getChildren);\n  const root = tree().size([contentHeight, contentWidth])(data);\n\n  // d3 gives us a top to down tree, but we will display it left to right/right to left, so x and y need to be swapped\n  const links = root.links().map(link => ({\n    ...link,\n    source: {\n      ...link.source,\n      x: props.direction !== 'rtl' ? link.source.y : contentWidth - link.source.y,\n      y: link.source.x\n    },\n    target: {\n      ...link.target,\n      x: props.direction !== 'rtl' ? link.target.y : contentWidth - link.target.y,\n      y: link.target.x\n    }\n  }));\n  const nodes = root.descendants().map(node => ({\n    ...node,\n    x: props.direction !== 'rtl' ? node.y : contentWidth - node.y,\n    y: node.x\n  }));\n  return {\n    links,\n    margins,\n    nodes\n  };\n}\n\nexport { getTreeData as default };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,IAAI,QAAQ,cAAc;AAE9C,SAASC,WAAWA,CAACC,KAAK,EAAE;EAC1B,MAAMC,OAAO,GAAGD,KAAK,CAACC,OAAO,IAAI;IAC/BC,MAAM,EAAE,EAAE;IACVC,IAAI,EAAEH,KAAK,CAACI,SAAS,KAAK,KAAK,GAAG,EAAE,GAAG,GAAG;IAC1CC,KAAK,EAAEL,KAAK,CAACI,SAAS,KAAK,KAAK,GAAG,GAAG,GAAG,EAAE;IAC3CE,GAAG,EAAE;EACP,CAAC;EACD,MAAMC,YAAY,GAAGP,KAAK,CAACQ,KAAK,GAAGP,OAAO,CAACE,IAAI,GAAGF,OAAO,CAACI,KAAK;EAC/D,MAAMI,aAAa,GAAGT,KAAK,CAACU,MAAM,GAAGT,OAAO,CAACK,GAAG,GAAGL,OAAO,CAACC,MAAM;EACjE,MAAMS,IAAI,GAAGd,SAAS,CAACG,KAAK,CAACW,IAAI,EAAEX,KAAK,CAACY,WAAW,CAAC;EACrD,MAAMC,IAAI,GAAGf,IAAI,CAAC,CAAC,CAACgB,IAAI,CAAC,CAACL,aAAa,EAAEF,YAAY,CAAC,CAAC,CAACI,IAAI,CAAC;;EAE7D;EACA,MAAMI,KAAK,GAAGF,IAAI,CAACE,KAAK,CAAC,CAAC,CAACC,GAAG,CAACC,IAAI,KAAK;IACtC,GAAGA,IAAI;IACPC,MAAM,EAAE;MACN,GAAGD,IAAI,CAACC,MAAM;MACdC,CAAC,EAAEnB,KAAK,CAACI,SAAS,KAAK,KAAK,GAAGa,IAAI,CAACC,MAAM,CAACE,CAAC,GAAGb,YAAY,GAAGU,IAAI,CAACC,MAAM,CAACE,CAAC;MAC3EA,CAAC,EAAEH,IAAI,CAACC,MAAM,CAACC;IACjB,CAAC;IACDE,MAAM,EAAE;MACN,GAAGJ,IAAI,CAACI,MAAM;MACdF,CAAC,EAAEnB,KAAK,CAACI,SAAS,KAAK,KAAK,GAAGa,IAAI,CAACI,MAAM,CAACD,CAAC,GAAGb,YAAY,GAAGU,IAAI,CAACI,MAAM,CAACD,CAAC;MAC3EA,CAAC,EAAEH,IAAI,CAACI,MAAM,CAACF;IACjB;EACF,CAAC,CAAC,CAAC;EACH,MAAMG,KAAK,GAAGT,IAAI,CAACU,WAAW,CAAC,CAAC,CAACP,GAAG,CAACQ,IAAI,KAAK;IAC5C,GAAGA,IAAI;IACPL,CAAC,EAAEnB,KAAK,CAACI,SAAS,KAAK,KAAK,GAAGoB,IAAI,CAACJ,CAAC,GAAGb,YAAY,GAAGiB,IAAI,CAACJ,CAAC;IAC7DA,CAAC,EAAEI,IAAI,CAACL;EACV,CAAC,CAAC,CAAC;EACH,OAAO;IACLJ,KAAK;IACLd,OAAO;IACPqB;EACF,CAAC;AACH;AAEA,SAASvB,WAAW,IAAI0B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}