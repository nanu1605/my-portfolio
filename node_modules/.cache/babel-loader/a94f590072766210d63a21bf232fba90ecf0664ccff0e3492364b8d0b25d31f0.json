{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tanis\\\\my-portfolio\\\\src\\\\components\\\\ThemeContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from 'react';\n\n// Create a Theme Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\n\n// Theme provider component to wrap around the app\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState('light');\n\n  // Detect user's system theme preference on initial load\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme') || 'light';\n    setTheme(savedTheme);\n  }, []);\n\n  // Toggle between light and dark theme\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme); // Save theme to local storage\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"Z8UCD9KudyQA62DCQ9e5cf9+m5k=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","theme","setTheme","savedTheme","localStorage","getItem","toggleTheme","newTheme","setItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tanis/my-portfolio/src/components/ThemeContext.js"],"sourcesContent":["import { createContext, useState, useEffect } from 'react';\r\n\r\n// Create a Theme Context\r\nexport const ThemeContext = createContext();\r\n\r\n// Theme provider component to wrap around the app\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [theme, setTheme] = useState('light');\r\n\r\n  // Detect user's system theme preference on initial load\r\n  useEffect(() => {\r\n    const savedTheme = localStorage.getItem('theme') || 'light';\r\n    setTheme(savedTheme);\r\n  }, []);\r\n\r\n  // Toggle between light and dark theme\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n    localStorage.setItem('theme', newTheme); // Save theme to local storage\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;;AAE3C;AACA,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,OAAO,CAAC;;EAE3C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO;IAC3DH,QAAQ,CAACC,UAAU,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,QAAQ,GAAGN,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACrDC,QAAQ,CAACK,QAAQ,CAAC;IAClBH,YAAY,CAACI,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC,CAAC,CAAC;EAC3C,CAAC;EAED,oBACEX,OAAA,CAACC,YAAY,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAET,KAAK;MAAEK;IAAY,CAAE;IAAAP,QAAA,EAClDA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACd,EAAA,CArBWF,aAAa;AAAAiB,EAAA,GAAbjB,aAAa;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}